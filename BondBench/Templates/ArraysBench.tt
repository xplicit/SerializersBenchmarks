<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="${TargetDir}/SerializersBenchmarks.dll" #>
<#@ assembly name="${TargetPath}" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="BondBench.Schemas" #>
<#@ import namespace="SerializersBenchmarks" #>
<#@ import namespace="SerializersBenchmarks.Objects" #>

using System;
using BenchmarkSuite.Framework;
using System.IO;
using SerializersBenchmarks;
using SerializersBenchmarks.Objects.Custom;
using BondBench.Schemas;
using Bond;
using Bond.Protocols;
using Bond.IO.Unsafe;

namespace <#=NameSpace#>
{
	[BenchFixture]
	public partial class ArraysBench
	{
		const int nIter = 10000;

		public ArraysBench ()
		{
			<# InitializeSerializer(); #>
		}
<#
	foreach (BenchTypeInfo typeInfo in SerializedTypes) {
#>

		[Bench]
		[Iterations(<#=typeInfo.Iterations#>)]
		public void Serialize<#=typeInfo.Name#>Stream()
		{
			var output = new OutputBuffer();
			var writer = new CompactBinaryWriter<OutputBuffer>(output);

			var ser = new Serializer<CompactBinaryWriter<OutputBuffer>> (typeof(<#=typeInfo.Name#>));
			var arr = <#=typeInfo.Name#>.Create();

			var b = Benchmark.StartNew ();

			for (int i = 0; i < <#=typeInfo.Iterations#>; i++) {
				output.Position = 0;
				ser.Serialize (arr, writer);
			}

			b.Stop ();
		}
	
		[Bench]
		[Iterations(<#=typeInfo.Iterations#>)]
		public void Deserialize<#=typeInfo.Name#>Stream()
		{
			var output = new OutputBuffer();
			var writer = new CompactBinaryWriter<OutputBuffer>(output);

			var ser = new Serializer<CompactBinaryWriter<OutputBuffer>> (typeof(<#=typeInfo.Name#>));
			var deser = new Deserializer<CompactBinaryReader<InputBuffer>>(typeof(<#=typeInfo.Name#>));
			var arr = <#=typeInfo.Name#>.Create();
			byte[] data;

			ser.Serialize (arr, writer);

			var input = new InputBuffer(output.Data);
			var reader = new CompactBinaryReader<InputBuffer>(input);

			var b = Benchmark.StartNew ();

			for (int i = 0; i < <#=typeInfo.Iterations#>; i++) {
				input.Position = 0;
				var des = deser.Deserialize<<#=typeInfo.Name#>>(reader);
			}

			b.Stop ();

			//Verification
			<#=typeInfo.Name#> des1;

			input.Position = 0;
			des1 = deser.Deserialize<<#=typeInfo.Name#>>(reader);

			<#=typeInfo.Name#>.Compare (arr, des1);

		}
<# 	}
#>

	}
}

<#+
    public virtual void Usings(){}
     
	public virtual string NameSpace {get {return "BondBench";}}

	public virtual BenchTypeInfo[] SerializedTypes {
		get {	
			return new BenchTypeInfo[] {
		 		new BenchTypeInfo(typeof(ArraySegment64K),100000),
		 		new BenchTypeInfo(typeof(ByteArray64K),10000),
		 		new BenchTypeInfo(typeof(ByteArray4K),100000),
		 		new BenchTypeInfo(typeof(IntArray64K),250),
		 		new BenchTypeInfo(typeof(LongArray64K),250),
		 		new BenchTypeInfo(typeof(ShortArray64K),250),
		 		new BenchTypeInfo(typeof(PrimitiveType),1000000),
		 		new BenchTypeInfo(typeof(IntList4K),1000)
		 	};
		}
	}

	public virtual void InitializeSerializer(){}

    public virtual void InstantiateSerializer(string name, string type){}

    public virtual void Serialize(string serName, string objName, string objType, string streamName){}

    public virtual void Deserialize(string serName, string objName, string objType, string streamName){}
#>
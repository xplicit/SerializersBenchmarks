<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SerializersBenchmarks" #>
<#@ import namespace="SerializersBenchmarks.Objects" #>

using System;
using BenchmarkSuite.Framework;
using System.IO;
using SerializersBenchmarks;
<# Usings(); #>

namespace <#=NameSpace#>
{
	[BenchFixture]
	public partial class ArraysBench
	{
		const int nIter = 10000;

		public ArraysBench ()
		{
			<# InitializeSerializer(); #>
		}
<#
	foreach (BenchTypeInfo typeInfo in SerializedTypes) {
#>

		[Bench]
		[Iterations(<#=typeInfo.Iterations#>)]
		public void Serialize<#=typeInfo.Name#>Stream()
		{
			//BinarySerializer ser = new BinarySerializer ();
			<# InstantiateSerializer("ser",typeInfo.Name); #>
			var arr = <#=typeInfo.Name#>.Create();

			var b = Benchmark.StartNew ();

			for (int i = 0; i < <#=typeInfo.Iterations#>; i++) {
				byte[] res;
				using (MemoryStream ms = new MemoryStream ()) {
					//ser.Serialize (ms, arr);
					<# Serialize("ser","arr",typeInfo.Name,"ms"); #>
					res = ms.ToArray ();
				}
			}

			b.Stop ();
		}
	
		[Bench]
		[Iterations(<#=typeInfo.Iterations#>)]
		public void Deserialize<#=typeInfo.Name#>Stream()
		{

			<# InstantiateSerializer("ser",typeInfo.Name); #>
			var arr = <#=typeInfo.Name#>.Create();
			byte[] data;

			using (MemoryStream ms = new MemoryStream ()) {
				<# Serialize("ser","arr",typeInfo.Name,"ms"); #>
				data = ms.ToArray ();
			}

			var b = Benchmark.StartNew ();

			for (int i = 0; i < <#=typeInfo.Iterations#>; i++) {
				using (MemoryStream ms = new MemoryStream (data)) {
					<#=typeInfo.Name#> des=<# Deserialize("ser","arr",typeInfo.Name,"ms"); #>
				}
			}

			b.Stop ();

			//Verification
			<#=typeInfo.Name#> des1;

			using (MemoryStream ms = new MemoryStream (data)) {
				des1=<# Deserialize("ser","arr",typeInfo.Name,"ms"); #>
			}

			<#=typeInfo.Name#>.Compare (arr, des1);

		}
<# 	}
#>

	}
}

<#+
    public virtual void Usings(){}
     
	public virtual string NameSpace {get {return "test";}}

	public virtual BenchTypeInfo[] SerializedTypes {
		get {	
			return new BenchTypeInfo[] {
		 		new BenchTypeInfo(typeof(ByteArray64K),10000),
		 		new BenchTypeInfo(typeof(ByteArray4K),100000),
		 		new BenchTypeInfo(typeof(IntArray64K),250),
		 		new BenchTypeInfo(typeof(LongArray64K),250),
		 		new BenchTypeInfo(typeof(ShortArray64K),250),
		 		new BenchTypeInfo(typeof(PrimitiveType),1000000),
		 		new BenchTypeInfo(typeof(IntList4K),1000)
		 	};
		}
	}

	public virtual void InitializeSerializer(){}

    public virtual void InstantiateSerializer(string name, string type){}

    public virtual void Serialize(string serName, string objName, string objType, string streamName){}

    public virtual void Deserialize(string serName, string objName, string objType, string streamName){}
#>